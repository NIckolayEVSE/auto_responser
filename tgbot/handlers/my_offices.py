from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hbold

from tgbot.keyboards.callback_data import FirstMarket, EditModeMessages, DeleteMarket
from tgbot.keyboards.inline import myself_office_kb, add_office_kb, cancel_add_token, check_setting_market, \
    adit_mode_messages, delete_market_kb
from tgbot.misc.api_wb_methods import ApiClient
from tgbot.misc.states import EnterTokenState, EditStarsList
from tgbot.models.db_commands import select_client, create_name_market_wb, select_market, select_token

my_office_router = Router()


@my_office_router.callback_query(F.data == 'my_office')
async def my_office_func(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë®üèº‚Äçüíª', reply_markup=await myself_office_kb())


@my_office_router.callback_query(F.data == 'my_cabinets')
async def my_cabinets_func(call: CallbackQuery, state: FSMContext):
    await state.clear()
    user = await select_client(call.message.chat.id)
    cabinets = user.wb_token.all()
    text = '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤: üè¨\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ 5 –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ\n' \
           f'–°–µ–π—á–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤: {cabinets.count()}'
    if not cabinets:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤! üà¥'
    await call.message.edit_text(text, reply_markup=await add_office_kb(cabinets))


@my_office_router.callback_query(F.data == 'add_token')
async def add_token_func(call: CallbackQuery, state: FSMContext):
    text = f'–£–∫–∞–∂–∏—Ç–µ {hbold("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")} —Ç–æ–∫–µ–Ω.üîë\n\n{hbold("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: üóù")}\n' \
           f'1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB ‚è© –ü—Ä–æ—Ñ–∏–ª—å ‚è© –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚è© –î–æ—Å—Ç—É–ø –∫ API\n' \
           f'–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://seller.wildberries.ru/supplier-settings/access-to-api\n' \
           f'2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ñ∂"{hbold("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")}"\n' \
           f'3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ {hbold("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π üóù")}, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ ‚ìÇ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚ñ∂{hbold("–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω")}' \
           f'\n\n–°–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω üîë –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ üëá'

    await call.message.edit_text(text, reply_markup=await cancel_add_token(),
                                 disable_web_page_preview=False)
    await state.set_state(EnterTokenState.enter_token)


@my_office_router.message(EnterTokenState.enter_token, F.text)
async def enter_token_func(message: Message, state: FSMContext):
    token = message.text
    in_db_token = await select_token(token)
    if in_db_token:
        await message.answer(text='–ü–æ—Ö–æ–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üÜò\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ –∏–ª–∏ '
                                  '–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b> ‚ùå', reply_markup=await cancel_add_token())
        return
    status_token = await ApiClient(api_key=token).check_standard_token()
    if status_token != 200:
        await message.answer('–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω üîë\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ'
                             ' –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b> ‚ùå',
                             reply_markup=await cancel_add_token())
        return
    await state.update_data(token=token)
    await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üëá', reply_markup=await cancel_add_token())
    await state.set_state(EnterTokenState.enter_market_name)


@my_office_router.message(EnterTokenState.enter_market_name, F.text)
async def enter_market_name_func(message: Message, state: FSMContext):
    name_market = message.text
    user = await select_client(message.from_user.id)
    data = await state.get_data()
    market_pk = await create_name_market_wb(user=user, token=data.get('token'), name_market=name_market)
    await message.answer(text=f'–í—ã —Å–æ–∑–¥–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω:\n\n<b>{name_market}</b> üè™',
                         reply_markup=await check_setting_market(market_pk))
    await state.clear()


@my_office_router.callback_query(FirstMarket.filter())
async def check_first_market_func(event: CallbackQuery | Message, callback_data: FirstMarket, state: FSMContext):
    market = await select_market(callback_data.id)
    text = f'–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n<b>{market.name_market}</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–∏–±–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–∞–∫ –±–æ—Ç' \
           ' –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –æ—Ç–∑—ã–≤—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –æ—Ü–µ–Ω–∫–∏.\n\n' \
           '–ù–∞–ø—Ä–∏–º–µ—Ä:\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã —Å –æ—Ü–µ–Ω–∫–æ–π 5 –∏ 4 –∑–≤–µ–∑–¥—ã –±–æ—Ç –æ—Ç–≤–µ—á–∞–ª –≤' \
           ' –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ. –ù–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã [—Å –æ—Ü–µ–Ω–∫–∞–º–∏ 3, 2, 1 –∑–≤–µ–∑–¥–∞] –±–æ—Ç' \
           ' –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.\n\n' \
           '–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤:\n\n' \
           f'1. ‚≠êÔ∏è - {"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if market.auto_send_star_1 else "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}\n' \
           f'2. ‚≠êÔ∏è‚≠êÔ∏è - {"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if market.auto_send_star_2 else "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}\n' \
           f'3. ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è - {"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if market.auto_send_star_3 else "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}\n' \
           f'4. ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è - {"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if market.auto_send_star_4 else "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}\n' \
           f'5. ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è - {"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if market.auto_send_star_5 else "–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"}\n\n' \
           f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –¥–ª—è –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫ ‚Äî –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ' \
           '–ü—Ä–∏–º–µ—Ä: 1, 2, 3'
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text=text, reply_markup=await adit_mode_messages(market))
    else:
        await event.answer(text=text, reply_markup=await adit_mode_messages(market))
    await state.update_data(pk=callback_data.id)
    await state.set_state(EditStarsList.enter_list_stars)


@my_office_router.message(EditStarsList.enter_list_stars, F.text)
async def enter_list_stars_func(message: Message, state: FSMContext):
    list_stars = message.text
    data = await state.get_data()
    market = await select_market(int(data['pk']))
    list_stars = list_stars.replace(' ', '')
    if (len(list_stars) > 1 and ',' not in list_stars) or not ''.join(list_stars.split(',')).isdigit():
        await message.answer("–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å —Å –≤–≤–æ–¥–æ–º! üÜò\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ")
        await check_first_market_func(message, FirstMarket(id=int(data['pk'])), state=state)
        return
    for star in list_stars.split(','):
        if int(star) > 5:
            await message.answer("–ö–∞–∂–µ—Ç—Å—è –≤—ã –æ—à–∏–±–ª–∏—Å—å —Å –≤–≤–æ–¥–æ–º! üÜò\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ")
            await check_first_market_func(message, FirstMarket(id=int(data['pk'])), state=state)
            return
        if int(star) == 1:
            market.auto_send_star_1 = True
        if int(star) == 2:
            market.auto_send_star_2 = True
        if int(star) == 3:
            market.auto_send_star_3 = True
        if int(star) == 4:
            market.auto_send_star_4 = True
        if int(star) == 5:
            market.auto_send_star_5 = True
    market.save()
    await check_first_market_func(message, FirstMarket(id=int(data['pk'])), state=state)


@my_office_router.callback_query(EditModeMessages.filter())
async def choose_mode_messages(call: CallbackQuery, callback_data: EditModeMessages, state: FSMContext):
    await state.clear()
    market = await select_market(callback_data.id)
    text = ''
    if callback_data.mode_mes == 'auto':
        market.auto_send_star_1 = True
        market.auto_send_star_2 = True
        market.auto_send_star_3 = True
        market.auto_send_star_4 = True
        market.auto_send_star_5 = True
        text = '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ü§ñ'
    elif callback_data.mode_mes == 'not_auto':
        market.auto_send_star_1 = False
        market.auto_send_star_2 = False
        market.auto_send_star_3 = False
        market.auto_send_star_4 = False
        market.auto_send_star_5 = False
        text = '–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π üì∫'
    market.save()
    await call.answer(text=text, show_alert=True)
    await check_first_market_func(call, FirstMarket(id=callback_data.id), state=state)


@my_office_router.callback_query(DeleteMarket.filter())
async def delete_func(call: CallbackQuery, callback_data: DeleteMarket, state: FSMContext):
    market = await select_market(callback_data.id)
    await call.message.edit_text(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω <b>{market.name_market}</b>? üìõ',
                                 reply_markup=await delete_market_kb())
    await state.update_data(pk_del=callback_data.id)


@my_office_router.callback_query(F.data == 'yes_del')
async def delete_market(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    market = await select_market(data.get('pk_del'))
    market.delete()
    await call.answer('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω ‚úÖ -> üóë')
    await my_cabinets_func(call, state)
